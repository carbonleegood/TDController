/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Thrift.GameCall
{
  public partial class GameFuncCall {
    public interface Iface {
      int Test(int p1, double p2);
      #if SILVERLIGHT
      IAsyncResult Begin_Test(AsyncCallback callback, object state, int p1, double p2);
      int End_Test(IAsyncResult asyncResult);
      #endif
      void EnterGame(int Index);
      #if SILVERLIGHT
      IAsyncResult Begin_EnterGame(AsyncCallback callback, object state, int Index);
      void End_EnterGame(IAsyncResult asyncResult);
      #endif
      PlayerInfo GetPlayerInfo();
      #if SILVERLIGHT
      IAsyncResult Begin_GetPlayerInfo(AsyncCallback callback, object state);
      PlayerInfo End_GetPlayerInfo(IAsyncResult asyncResult);
      #endif
      List<MonsterInfo> GetMonsterList();
      #if SILVERLIGHT
      IAsyncResult Begin_GetMonsterList(AsyncCallback callback, object state);
      List<MonsterInfo> End_GetMonsterList(IAsyncResult asyncResult);
      #endif
      void GetSkillInfo();
      #if SILVERLIGHT
      IAsyncResult Begin_GetSkillInfo(AsyncCallback callback, object state);
      void End_GetSkillInfo(IAsyncResult asyncResult);
      #endif
      void ChangeAngle(double angle);
      #if SILVERLIGHT
      IAsyncResult Begin_ChangeAngle(AsyncCallback callback, object state, double angle);
      void End_ChangeAngle(IAsyncResult asyncResult);
      #endif
      int FindPath(double x, double y);
      #if SILVERLIGHT
      IAsyncResult Begin_FindPath(AsyncCallback callback, object state, double x, double y);
      int End_FindPath(IAsyncResult asyncResult);
      #endif
      int PressKey(int key, int upordown);
      #if SILVERLIGHT
      IAsyncResult Begin_PressKey(AsyncCallback callback, object state, int key, int upordown);
      int End_PressKey(IAsyncResult asyncResult);
      #endif
      int ClickKey(int key, int ctrl);
      #if SILVERLIGHT
      IAsyncResult Begin_ClickKey(AsyncCallback callback, object state, int key, int ctrl);
      int End_ClickKey(IAsyncResult asyncResult);
      #endif
      int LeftPressSlot(int SlotAddr);
      #if SILVERLIGHT
      IAsyncResult Begin_LeftPressSlot(AsyncCallback callback, object state, int SlotAddr);
      int End_LeftPressSlot(IAsyncResult asyncResult);
      #endif
      int RightPressSlot(int SlotAddr);
      #if SILVERLIGHT
      IAsyncResult Begin_RightPressSlot(AsyncCallback callback, object state, int SlotAddr);
      int End_RightPressSlot(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_Test(AsyncCallback callback, object state, int p1, double p2)
      {
        return send_Test(callback, state, p1, p2);
      }

      public int End_Test(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Test();
      }

      #endif

      public int Test(int p1, double p2)
      {
        #if !SILVERLIGHT
        send_Test(p1, p2);
        return recv_Test();

        #else
        var asyncResult = Begin_Test(null, null, p1, p2);
        return End_Test(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Test(AsyncCallback callback, object state, int p1, double p2)
      #else
      public void send_Test(int p1, double p2)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Test", TMessageType.Call, seqid_));
        Test_args args = new Test_args();
        args.P1 = p1;
        args.P2 = p2;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_Test()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Test_result result = new Test_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Test failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_EnterGame(AsyncCallback callback, object state, int Index)
      {
        return send_EnterGame(callback, state, Index);
      }

      public void End_EnterGame(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_EnterGame();
      }

      #endif

      public void EnterGame(int Index)
      {
        #if !SILVERLIGHT
        send_EnterGame(Index);
        recv_EnterGame();

        #else
        var asyncResult = Begin_EnterGame(null, null, Index);
        End_EnterGame(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EnterGame(AsyncCallback callback, object state, int Index)
      #else
      public void send_EnterGame(int Index)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("EnterGame", TMessageType.Call, seqid_));
        EnterGame_args args = new EnterGame_args();
        args.Index = Index;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_EnterGame()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EnterGame_result result = new EnterGame_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetPlayerInfo(AsyncCallback callback, object state)
      {
        return send_GetPlayerInfo(callback, state);
      }

      public PlayerInfo End_GetPlayerInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetPlayerInfo();
      }

      #endif

      public PlayerInfo GetPlayerInfo()
      {
        #if !SILVERLIGHT
        send_GetPlayerInfo();
        return recv_GetPlayerInfo();

        #else
        var asyncResult = Begin_GetPlayerInfo(null, null);
        return End_GetPlayerInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetPlayerInfo(AsyncCallback callback, object state)
      #else
      public void send_GetPlayerInfo()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetPlayerInfo", TMessageType.Call, seqid_));
        GetPlayerInfo_args args = new GetPlayerInfo_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public PlayerInfo recv_GetPlayerInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetPlayerInfo_result result = new GetPlayerInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPlayerInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetMonsterList(AsyncCallback callback, object state)
      {
        return send_GetMonsterList(callback, state);
      }

      public List<MonsterInfo> End_GetMonsterList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetMonsterList();
      }

      #endif

      public List<MonsterInfo> GetMonsterList()
      {
        #if !SILVERLIGHT
        send_GetMonsterList();
        return recv_GetMonsterList();

        #else
        var asyncResult = Begin_GetMonsterList(null, null);
        return End_GetMonsterList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetMonsterList(AsyncCallback callback, object state)
      #else
      public void send_GetMonsterList()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetMonsterList", TMessageType.Call, seqid_));
        GetMonsterList_args args = new GetMonsterList_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<MonsterInfo> recv_GetMonsterList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetMonsterList_result result = new GetMonsterList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetMonsterList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetSkillInfo(AsyncCallback callback, object state)
      {
        return send_GetSkillInfo(callback, state);
      }

      public void End_GetSkillInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GetSkillInfo();
      }

      #endif

      public void GetSkillInfo()
      {
        #if !SILVERLIGHT
        send_GetSkillInfo();
        recv_GetSkillInfo();

        #else
        var asyncResult = Begin_GetSkillInfo(null, null);
        End_GetSkillInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSkillInfo(AsyncCallback callback, object state)
      #else
      public void send_GetSkillInfo()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetSkillInfo", TMessageType.Call, seqid_));
        GetSkillInfo_args args = new GetSkillInfo_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_GetSkillInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSkillInfo_result result = new GetSkillInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ChangeAngle(AsyncCallback callback, object state, double angle)
      {
        return send_ChangeAngle(callback, state, angle);
      }

      public void End_ChangeAngle(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_ChangeAngle();
      }

      #endif

      public void ChangeAngle(double angle)
      {
        #if !SILVERLIGHT
        send_ChangeAngle(angle);
        recv_ChangeAngle();

        #else
        var asyncResult = Begin_ChangeAngle(null, null, angle);
        End_ChangeAngle(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ChangeAngle(AsyncCallback callback, object state, double angle)
      #else
      public void send_ChangeAngle(double angle)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ChangeAngle", TMessageType.Call, seqid_));
        ChangeAngle_args args = new ChangeAngle_args();
        args.Angle = angle;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_ChangeAngle()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ChangeAngle_result result = new ChangeAngle_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_FindPath(AsyncCallback callback, object state, double x, double y)
      {
        return send_FindPath(callback, state, x, y);
      }

      public int End_FindPath(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FindPath();
      }

      #endif

      public int FindPath(double x, double y)
      {
        #if !SILVERLIGHT
        send_FindPath(x, y);
        return recv_FindPath();

        #else
        var asyncResult = Begin_FindPath(null, null, x, y);
        return End_FindPath(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FindPath(AsyncCallback callback, object state, double x, double y)
      #else
      public void send_FindPath(double x, double y)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FindPath", TMessageType.Call, seqid_));
        FindPath_args args = new FindPath_args();
        args.X = x;
        args.Y = y;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_FindPath()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FindPath_result result = new FindPath_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FindPath failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PressKey(AsyncCallback callback, object state, int key, int upordown)
      {
        return send_PressKey(callback, state, key, upordown);
      }

      public int End_PressKey(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PressKey();
      }

      #endif

      public int PressKey(int key, int upordown)
      {
        #if !SILVERLIGHT
        send_PressKey(key, upordown);
        return recv_PressKey();

        #else
        var asyncResult = Begin_PressKey(null, null, key, upordown);
        return End_PressKey(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PressKey(AsyncCallback callback, object state, int key, int upordown)
      #else
      public void send_PressKey(int key, int upordown)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PressKey", TMessageType.Call, seqid_));
        PressKey_args args = new PressKey_args();
        args.Key = key;
        args.Upordown = upordown;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_PressKey()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PressKey_result result = new PressKey_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PressKey failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ClickKey(AsyncCallback callback, object state, int key, int ctrl)
      {
        return send_ClickKey(callback, state, key, ctrl);
      }

      public int End_ClickKey(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ClickKey();
      }

      #endif

      public int ClickKey(int key, int ctrl)
      {
        #if !SILVERLIGHT
        send_ClickKey(key, ctrl);
        return recv_ClickKey();

        #else
        var asyncResult = Begin_ClickKey(null, null, key, ctrl);
        return End_ClickKey(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ClickKey(AsyncCallback callback, object state, int key, int ctrl)
      #else
      public void send_ClickKey(int key, int ctrl)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ClickKey", TMessageType.Call, seqid_));
        ClickKey_args args = new ClickKey_args();
        args.Key = key;
        args.Ctrl = ctrl;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_ClickKey()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ClickKey_result result = new ClickKey_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ClickKey failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_LeftPressSlot(AsyncCallback callback, object state, int SlotAddr)
      {
        return send_LeftPressSlot(callback, state, SlotAddr);
      }

      public int End_LeftPressSlot(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_LeftPressSlot();
      }

      #endif

      public int LeftPressSlot(int SlotAddr)
      {
        #if !SILVERLIGHT
        send_LeftPressSlot(SlotAddr);
        return recv_LeftPressSlot();

        #else
        var asyncResult = Begin_LeftPressSlot(null, null, SlotAddr);
        return End_LeftPressSlot(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_LeftPressSlot(AsyncCallback callback, object state, int SlotAddr)
      #else
      public void send_LeftPressSlot(int SlotAddr)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("LeftPressSlot", TMessageType.Call, seqid_));
        LeftPressSlot_args args = new LeftPressSlot_args();
        args.SlotAddr = SlotAddr;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_LeftPressSlot()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LeftPressSlot_result result = new LeftPressSlot_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "LeftPressSlot failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RightPressSlot(AsyncCallback callback, object state, int SlotAddr)
      {
        return send_RightPressSlot(callback, state, SlotAddr);
      }

      public int End_RightPressSlot(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RightPressSlot();
      }

      #endif

      public int RightPressSlot(int SlotAddr)
      {
        #if !SILVERLIGHT
        send_RightPressSlot(SlotAddr);
        return recv_RightPressSlot();

        #else
        var asyncResult = Begin_RightPressSlot(null, null, SlotAddr);
        return End_RightPressSlot(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RightPressSlot(AsyncCallback callback, object state, int SlotAddr)
      #else
      public void send_RightPressSlot(int SlotAddr)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RightPressSlot", TMessageType.Call, seqid_));
        RightPressSlot_args args = new RightPressSlot_args();
        args.SlotAddr = SlotAddr;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_RightPressSlot()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RightPressSlot_result result = new RightPressSlot_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RightPressSlot failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["Test"] = Test_Process;
        processMap_["EnterGame"] = EnterGame_Process;
        processMap_["GetPlayerInfo"] = GetPlayerInfo_Process;
        processMap_["GetMonsterList"] = GetMonsterList_Process;
        processMap_["GetSkillInfo"] = GetSkillInfo_Process;
        processMap_["ChangeAngle"] = ChangeAngle_Process;
        processMap_["FindPath"] = FindPath_Process;
        processMap_["PressKey"] = PressKey_Process;
        processMap_["ClickKey"] = ClickKey_Process;
        processMap_["LeftPressSlot"] = LeftPressSlot_Process;
        processMap_["RightPressSlot"] = RightPressSlot_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Test_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Test_args args = new Test_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Test_result result = new Test_result();
        result.Success = iface_.Test(args.P1, args.P2);
        oprot.WriteMessageBegin(new TMessage("Test", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void EnterGame_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EnterGame_args args = new EnterGame_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EnterGame_result result = new EnterGame_result();
        iface_.EnterGame(args.Index);
        oprot.WriteMessageBegin(new TMessage("EnterGame", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetPlayerInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetPlayerInfo_args args = new GetPlayerInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetPlayerInfo_result result = new GetPlayerInfo_result();
        result.Success = iface_.GetPlayerInfo();
        oprot.WriteMessageBegin(new TMessage("GetPlayerInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetMonsterList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetMonsterList_args args = new GetMonsterList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetMonsterList_result result = new GetMonsterList_result();
        result.Success = iface_.GetMonsterList();
        oprot.WriteMessageBegin(new TMessage("GetMonsterList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSkillInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSkillInfo_args args = new GetSkillInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSkillInfo_result result = new GetSkillInfo_result();
        iface_.GetSkillInfo();
        oprot.WriteMessageBegin(new TMessage("GetSkillInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ChangeAngle_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ChangeAngle_args args = new ChangeAngle_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ChangeAngle_result result = new ChangeAngle_result();
        iface_.ChangeAngle(args.Angle);
        oprot.WriteMessageBegin(new TMessage("ChangeAngle", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FindPath_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FindPath_args args = new FindPath_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FindPath_result result = new FindPath_result();
        result.Success = iface_.FindPath(args.X, args.Y);
        oprot.WriteMessageBegin(new TMessage("FindPath", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PressKey_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PressKey_args args = new PressKey_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PressKey_result result = new PressKey_result();
        result.Success = iface_.PressKey(args.Key, args.Upordown);
        oprot.WriteMessageBegin(new TMessage("PressKey", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ClickKey_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ClickKey_args args = new ClickKey_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ClickKey_result result = new ClickKey_result();
        result.Success = iface_.ClickKey(args.Key, args.Ctrl);
        oprot.WriteMessageBegin(new TMessage("ClickKey", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LeftPressSlot_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LeftPressSlot_args args = new LeftPressSlot_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LeftPressSlot_result result = new LeftPressSlot_result();
        result.Success = iface_.LeftPressSlot(args.SlotAddr);
        oprot.WriteMessageBegin(new TMessage("LeftPressSlot", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RightPressSlot_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RightPressSlot_args args = new RightPressSlot_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RightPressSlot_result result = new RightPressSlot_result();
        result.Success = iface_.RightPressSlot(args.SlotAddr);
        oprot.WriteMessageBegin(new TMessage("RightPressSlot", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Test_args : TBase
    {
      private int _p1;
      private double _p2;

      public int P1
      {
        get
        {
          return _p1;
        }
        set
        {
          __isset.p1 = true;
          this._p1 = value;
        }
      }

      public double P2
      {
        get
        {
          return _p2;
        }
        set
        {
          __isset.p2 = true;
          this._p2 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool p1;
        public bool p2;
      }

      public Test_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                P1 = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                P2 = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Test_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.p1) {
          field.Name = "p1";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(P1);
          oprot.WriteFieldEnd();
        }
        if (__isset.p2) {
          field.Name = "p2";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(P2);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Test_args(");
        sb.Append("P1: ");
        sb.Append(P1);
        sb.Append(",P2: ");
        sb.Append(P2);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Test_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Test_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Test_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Test_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EnterGame_args : TBase
    {
      private int _Index;

      public int Index
      {
        get
        {
          return _Index;
        }
        set
        {
          __isset.Index = true;
          this._Index = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool Index;
      }

      public EnterGame_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EnterGame_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Index) {
          field.Name = "Index";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EnterGame_args(");
        sb.Append("Index: ");
        sb.Append(Index);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EnterGame_result : TBase
    {

      public EnterGame_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("EnterGame_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("EnterGame_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPlayerInfo_args : TBase
    {

      public GetPlayerInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetPlayerInfo_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetPlayerInfo_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPlayerInfo_result : TBase
    {
      private PlayerInfo _success;

      public PlayerInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetPlayerInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PlayerInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetPlayerInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetPlayerInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMonsterList_args : TBase
    {

      public GetMonsterList_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetMonsterList_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetMonsterList_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMonsterList_result : TBase
    {
      private List<MonsterInfo> _success;

      public List<MonsterInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetMonsterList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<MonsterInfo>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    MonsterInfo _elem10 = new MonsterInfo();
                    _elem10 = new MonsterInfo();
                    _elem10.Read(iprot);
                    Success.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetMonsterList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (MonsterInfo _iter11 in Success)
              {
                _iter11.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetMonsterList_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSkillInfo_args : TBase
    {

      public GetSkillInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSkillInfo_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSkillInfo_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSkillInfo_result : TBase
    {

      public GetSkillInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSkillInfo_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSkillInfo_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ChangeAngle_args : TBase
    {
      private double _angle;

      public double Angle
      {
        get
        {
          return _angle;
        }
        set
        {
          __isset.angle = true;
          this._angle = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool angle;
      }

      public ChangeAngle_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Double) {
                Angle = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ChangeAngle_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.angle) {
          field.Name = "angle";
          field.Type = TType.Double;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Angle);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ChangeAngle_args(");
        sb.Append("Angle: ");
        sb.Append(Angle);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ChangeAngle_result : TBase
    {

      public ChangeAngle_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ChangeAngle_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ChangeAngle_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindPath_args : TBase
    {
      private double _x;
      private double _y;

      public double X
      {
        get
        {
          return _x;
        }
        set
        {
          __isset.x = true;
          this._x = value;
        }
      }

      public double Y
      {
        get
        {
          return _y;
        }
        set
        {
          __isset.y = true;
          this._y = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool x;
        public bool y;
      }

      public FindPath_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Double) {
                X = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                Y = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FindPath_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.x) {
          field.Name = "x";
          field.Type = TType.Double;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(X);
          oprot.WriteFieldEnd();
        }
        if (__isset.y) {
          field.Name = "y";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Y);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FindPath_args(");
        sb.Append("X: ");
        sb.Append(X);
        sb.Append(",Y: ");
        sb.Append(Y);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FindPath_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FindPath_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("FindPath_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("FindPath_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PressKey_args : TBase
    {
      private int _key;
      private int _upordown;

      public int Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public int Upordown
      {
        get
        {
          return _upordown;
        }
        set
        {
          __isset.upordown = true;
          this._upordown = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool upordown;
      }

      public PressKey_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Key = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Upordown = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PressKey_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.key) {
          field.Name = "key";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Key);
          oprot.WriteFieldEnd();
        }
        if (__isset.upordown) {
          field.Name = "upordown";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Upordown);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PressKey_args(");
        sb.Append("Key: ");
        sb.Append(Key);
        sb.Append(",Upordown: ");
        sb.Append(Upordown);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PressKey_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PressKey_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PressKey_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PressKey_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ClickKey_args : TBase
    {
      private int _key;
      private int _ctrl;

      public int Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public int Ctrl
      {
        get
        {
          return _ctrl;
        }
        set
        {
          __isset.ctrl = true;
          this._ctrl = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool ctrl;
      }

      public ClickKey_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Key = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Ctrl = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ClickKey_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.key) {
          field.Name = "key";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Key);
          oprot.WriteFieldEnd();
        }
        if (__isset.ctrl) {
          field.Name = "ctrl";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Ctrl);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ClickKey_args(");
        sb.Append("Key: ");
        sb.Append(Key);
        sb.Append(",Ctrl: ");
        sb.Append(Ctrl);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ClickKey_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ClickKey_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ClickKey_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ClickKey_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LeftPressSlot_args : TBase
    {
      private int _SlotAddr;

      public int SlotAddr
      {
        get
        {
          return _SlotAddr;
        }
        set
        {
          __isset.SlotAddr = true;
          this._SlotAddr = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool SlotAddr;
      }

      public LeftPressSlot_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                SlotAddr = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LeftPressSlot_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.SlotAddr) {
          field.Name = "SlotAddr";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SlotAddr);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LeftPressSlot_args(");
        sb.Append("SlotAddr: ");
        sb.Append(SlotAddr);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LeftPressSlot_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public LeftPressSlot_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LeftPressSlot_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LeftPressSlot_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RightPressSlot_args : TBase
    {
      private int _SlotAddr;

      public int SlotAddr
      {
        get
        {
          return _SlotAddr;
        }
        set
        {
          __isset.SlotAddr = true;
          this._SlotAddr = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool SlotAddr;
      }

      public RightPressSlot_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                SlotAddr = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RightPressSlot_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.SlotAddr) {
          field.Name = "SlotAddr";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SlotAddr);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RightPressSlot_args(");
        sb.Append("SlotAddr: ");
        sb.Append(SlotAddr);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RightPressSlot_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RightPressSlot_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RightPressSlot_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RightPressSlot_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
